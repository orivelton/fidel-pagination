{"version":3,"sources":["Api/api.js","Components/ItemList.js","Api/apiSecret/apiKey.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["nextTransactions","ItemList","currentItem","handleModal","currency","scheme","card","location","address","city","countryCode","className","onClick","getData","a","paramStart","encodeURIComponent","JSON","stringify","url","axios","get","headers","apiKey","catch","error","console","response","data","last","Modal","openModal","lastNumbers","MID","identifiers","aria-label","App","useState","transactions","setTransactions","setNextTransactions","setOpenModal","setCurrentItem","useEffect","result","items","fetchData","item","length","dataLength","endMessage","loader","max","hasMore","next","map","key","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.99884817.chunk.js","sourcesContent":["import axios from 'axios';\nimport apiKey from './apiSecret/apiKey';\n\nlet nextTransactions;\n\nconst getData = async () => {\n  const paramStart = nextTransactions ? `&start=${encodeURIComponent(JSON.stringify(nextTransactions))}` : '';\n  const url = `https://api-dev.fidel.uk/v1d/programs/2314f371-39b1-4c80-8040-4144ff1bad09/transactions?limit=50${paramStart}`;\n  const response = await axios.get(url, {headers: apiKey}).catch((error) => console.error(error));\n  const { data } = response;\n  const { last } = data;\n  nextTransactions = last;\n\n  return data;\n}\n\nexport default getData;\n","import React from 'react';\n\nconst ItemList = ({currentItem, handleModal}) => {\n  debugger;\n  const {\n    currency,\n    card: { scheme },\n    location: { \n      address,\n      city,\n      countryCode\n    }\n  } = currentItem;\n  \n  return (\n    <li className=\"tags has-addons panel-block item-list\" onClick={() => handleModal(currentItem)}>\n        <span className=\"tag is-primary is-large is-light\">{currency}</span>\n        <span className={scheme === 'visa' ? 'tag is-danger is-large is-light' : 'tag is-link is-large is-light'}>{scheme}</span>\n        <span className={'tag is-light is-large'}>\n          <address>Address: {`${address}, ${city} - ${countryCode}`}</address>\n        </span>\n    </li>\n  )\n};\n\nexport default ItemList;\n","export default {\n  \"content-type\": \"application/json\",\n  \"fidel-key\": \"sk_test_8b665908-284c-4dd1-a364-7ebc575c18f6\"\n};\n","import React from 'react';\n\nconst Modal = ({ openModal, handleModal, currentItem }) => {\n  const {card: { scheme, lastNumbers }} = currentItem;\n  const { location: { address, city, countryCode } } = currentItem;\n  const { identifiers: { MID }} = currentItem;\n  return (\n    <div className={openModal ? 'modal is-active' : 'modal'}>\n      <div className=\"modal-background\" onClick={handleModal}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Scheme: {scheme}</p>\n          <button className=\"delete\" aria-label=\"close\" onClick={handleModal}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <address>Address: {`${address}, ${city} - ${countryCode}`}</address>\n          <p>Last Numbers: {lastNumbers}</p>\n          <p>MID: {MID}</p>\n        </section>\n      </div>\n    </div>\n  )\n} ;\n\nexport default Modal;\n","import React, { useEffect, useState } from 'react';\nimport ItemList from './Components/ItemList';\nimport getData from './Api/api';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Modal from './Components/Modal';\n\nconst App = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [nextTransactions, setNextTransactions] = useState(0);\n  const [openModal, setOpenModal] = useState(false);\n  const [currentItem, setCurrentItem] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getData();\n      const { items } = result;\n      setTransactions(transactions => [...transactions, ...items]);\n    }\n\n    fetchData();\n  }, [nextTransactions]);\n  \n  const handleModal = (item) => {\n    setOpenModal(!openModal);\n    !openModal && setCurrentItem(item);\n  };\n  \n  return (\n    <>\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Transactions</h1>\n            <ul>\n              {\n                transactions.length > 0 && <InfiniteScroll\n                  dataLength={transactions.length}\n                  endMessage={<p>Yay! You have seen it all</p>}\n                  loader={<progress className=\"progress is-small is-primary\" max=\"100\">50%</progress>}\n                  hasMore\n                  next={() => setNextTransactions(next => ++next)}\n                >\n                  {transactions.map(item => <ItemList key={item.id} currentItem={item} handleModal={handleModal} />)}\n                </InfiniteScroll>\n              }\n            </ul>\n            {currentItem && <Modal openModal={openModal} handleModal={handleModal} currentItem={currentItem}/>}\n          </div>\n        </div>\n      </section>\n    </>\n  )\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}